# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: "3"

env:
  ANSIBLE_CONFIG: "{{.USER_WORKING_DIR}}/ansible.cfg"
  ANSIBLE_LINT_CONFIG: "{{.USER_WORKING_DIR}}/.config/ansible-lint.yml"
  YAMLLINT_CONFIG_FILE: "{{.USER_WORKING_DIR}}/.config/yamllint.yml"

dotenv: [".env.dist", ".env"]

tasks:
  default:
    aliases: [play]
    dir: "{{.USER_WORKING_DIR}}"
    desc: "task play -- ansible/file.yml"
    summary: |
      Script for easy running playbooks

      It takes all shell arguments, i.e., playbook location,
      tags, env, and everything you'll pass it.
    cmds:
      - bash ./scripts/play.sh {{.CLI_ARGS}}

  install:
    dir: "{{.USER_WORKING_DIR}}"
    desc: "task install"
    summary: |
      Script for setup the virtual environment and install all dependencies

      It utilizes uv to create a virtual environment, activate it
      and install all dependencies from pyproject.toml.
    cmds:
      - uv venv -p $(cat .python-version)
      - task: venv
        vars:
          content: |-
                    uv pip install -r requirements.txt
                    ansible-galaxy collection install -r requirements.yml

  # ======================================================================
  # Python tasks
  # ======================================================================
  pip-compile:
    desc: "task pip-compile"
    summary: |
      Script for easy running pip-compile

      It updates the requirements.txt file with the latest versions
      of all packages and their dependencies from pyproject.toml.
    cmds:
      - task: venv
        vars:
          content: 'uv pip compile pyproject.toml -o requirements.txt'

  pip-sync:
    desc: "task pip-sync"
    summary: |
      Script for easy running pip-sync

      It installs, upgrades, downgrades, and uninstalls packages to
      match the requirements.txt file.
    cmds:
      - task: venv
        vars:
          content: 'uv pip sync requirements.txt'

  venv:
    desc: "task venv"
    summary: |
      Script for easy running commands in the virtual environment

      It takes all shell arguments, i.e., environment,
      tags, and everything you'll pass it.
    silent: true
    cmds:
      - |-
        bash << 'eof'
        source .venv/bin/activate
        {{.content}}
        eof

  # ======================================================================
  # Ansible linting tasks
  # ======================================================================
  lint:
    desc: "task lint -- ansible/playbook.yml"
    summary: |
      Script for easy running ansible-lint and yamllint

      It runs linters with default config on the ansible directory.
    deps: [ansible-lint, yamllint]

  ansible-lint:
    cmds:
      - task: venv
        vars:
          content: ansible-lint -c $ANSIBLE_LINT_CONFIG {{.CLI_ARGS}}

  yamllint:
    cmds:
      - task: venv
        vars:
          content: yamllint -c $YAMLLINT_CONFIG_FILE {{.CLI_ARGS}}

  # ======================================================================
  # Vagrant tasks
  # ======================================================================
  start:
    cmds:
      - vagrant up --provider=virtualbox
    desc: Start Virtualbox VM
    summary: |
      Script for easy running vagrant up

      It runs vagrant up with default config on the ansible directory.
      For Window machine you need change to:
      - vagrant up --provider=hyperv

  stop:
    cmds:
      - vagrant halt
    desc: Stop Virtualbox VM

  destroy:
    cmds:
      - vagrant destroy -f
      - rm -rf .vagrant
      - sed -i '/^jcdecaux.local/d' known_hosts
    desc: Delete Virtualbox VM from disk

  ssh:
    cmds:
      - vagrant ssh
    desc: Start SSH session to Virtualbox VM

  box:
    cmds:
      - vagrant box list
    desc: List available Vagrant boxes

  vagrant-prune:
    cmds:
      - vagrant global-status --prune
    desc: Prune Vagrant global status

  test-connectivity:
    cmds:
      - vagrant ssh -c "ping -c 1 jcdecaux.local"
    desc: Test connectivity to Virtualbox VM

  test-curl:
    cmds:
      - vagrant ssh -c "curl -I jcdecaux.local"
    desc: Test curl to Virtualbox VM
