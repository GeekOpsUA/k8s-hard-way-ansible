---
- name: Get public IP
  ansible.builtin.debug:
    msg: "{{ ansible_default_ipv4.address }}"
  register: primary_ip

- name: Get all network interfaces
  ansible.builtin.debug:
    msg: "{{ ansible_interfaces }}"
  register: interfaces

- name: List IP addresses
  ansible.builtin.debug:
    msg: "{{ ansible_all_ipv4_addresses }}"
  register: all_ips

- name: Get private IP
  ansible.builtin.debug:
    msg: "{{ ansible_all_ipv4_addresses | difference([primary_ip.msg]) }}"
  register: private_ip

- name: Get network for private IP
  ansible.builtin.debug:
    msg: >-
      {{
      private_ip.msg[0].split('.')[0]
      }}.{{
      private_ip.msg[0].split('.')[1]
      }}.{{
      private_ip.msg[0].split('.')[2]
      }}
  register: network

- name: Setup ENV variables and hosts
  become: true
  block:
    - name: Export PRIMARY IP as an environment variable
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: "PRIMARY_IP={{ private_ip.msg[0] }}"

    - name: Get OS architecture
      when: ansible_os_family == 'Debian'
      ansible.builtin.shell: dpkg --print-architecture
      register: arch

    - name: Export architecture as environment variable
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: "ARCH={{ arch.stdout }}"

    - name: Remove host entry
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "^.*{{ ansible_hostname }}.*"
        state: absent

    - name: Update /etc/hosts about other hosts
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          {{ network.msg }}.11  controlplane01
          {{ network.msg }}.12  controlplane02
          {{ network.msg }}.21  node01
          {{ network.msg }}.22  node02
          {{ network.msg }}.30  loadbalancer

- name: Setup Cloudflare DNS server
  become: true
  block:
    - name: Check if resolv.conf is present
      ansible.builtin.stat:
        path: /etc/resolv.conf
      register: resolv

    - name: Check if systemd-resolved is in use
      ansible.builtin.stat:
        path: /etc/systemd/resolved.conf
      register: resolved

    - name: Update resolv.conf
      when: resolv.stat.exists and not resolved.stat.exists
      ansible.builtin.lineinfile:
        path: /etc/resolv.conf
        backup: true
        line: |
          nameserver 1.1.1.1
          nameserver 1.0.0.1

    - name: Update resolved.conf
      when: resolved.stat.exists
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        backup: true
        regexp: '^#DNS='
        line: 'DNS=1.1.1.1'



    - name: Restart systemd-resolved
      when: resolved.stat.exists
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted
